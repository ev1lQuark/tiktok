// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: like.proto

package like

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LikeClient is the client API for Like service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LikeClient interface {
	// 根据userId获取本账号所发视频获赞总数
	GeteTotalFavoritedNum(ctx context.Context, in *GetFavoriteCountByUserIdReq, opts ...grpc.CallOption) (*GeteTotalFavoritedNumReply, error)
	// 根据userId获取本账号喜欢（点赞）总数
	GetFavoriteCountByUserId(ctx context.Context, in *GetFavoriteCountByUserIdReq, opts ...grpc.CallOption) (*GetFavoriteCountByUserIdReply, error)
	// 根据videoId获取视屏点赞总数
	GetFavoriteCountByVideoId(ctx context.Context, in *GetFavoriteCountByVideoIdReq, opts ...grpc.CallOption) (*EtFavoriteCountByUserIdReply, error)
	// 根据userId和videoId判断是否点赞
	IsFavorite(ctx context.Context, in *IsFavoriteReq, opts ...grpc.CallOption) (*IsFavoriteReply, error)
}

type likeClient struct {
	cc grpc.ClientConnInterface
}

func NewLikeClient(cc grpc.ClientConnInterface) LikeClient {
	return &likeClient{cc}
}

func (c *likeClient) GeteTotalFavoritedNum(ctx context.Context, in *GetFavoriteCountByUserIdReq, opts ...grpc.CallOption) (*GeteTotalFavoritedNumReply, error) {
	out := new(GeteTotalFavoritedNumReply)
	err := c.cc.Invoke(ctx, "/user.like/geteTotalFavoritedNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likeClient) GetFavoriteCountByUserId(ctx context.Context, in *GetFavoriteCountByUserIdReq, opts ...grpc.CallOption) (*GetFavoriteCountByUserIdReply, error) {
	out := new(GetFavoriteCountByUserIdReply)
	err := c.cc.Invoke(ctx, "/user.like/getFavoriteCountByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likeClient) GetFavoriteCountByVideoId(ctx context.Context, in *GetFavoriteCountByVideoIdReq, opts ...grpc.CallOption) (*EtFavoriteCountByUserIdReply, error) {
	out := new(EtFavoriteCountByUserIdReply)
	err := c.cc.Invoke(ctx, "/user.like/getFavoriteCountByVideoId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likeClient) IsFavorite(ctx context.Context, in *IsFavoriteReq, opts ...grpc.CallOption) (*IsFavoriteReply, error) {
	out := new(IsFavoriteReply)
	err := c.cc.Invoke(ctx, "/user.like/isFavorite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LikeServer is the server API for Like service.
// All implementations must embed UnimplementedLikeServer
// for forward compatibility
type LikeServer interface {
	// 根据userId获取本账号所发视频获赞总数
	GeteTotalFavoritedNum(context.Context, *GetFavoriteCountByUserIdReq) (*GeteTotalFavoritedNumReply, error)
	// 根据userId获取本账号喜欢（点赞）总数
	GetFavoriteCountByUserId(context.Context, *GetFavoriteCountByUserIdReq) (*GetFavoriteCountByUserIdReply, error)
	// 根据videoId获取视屏点赞总数
	GetFavoriteCountByVideoId(context.Context, *GetFavoriteCountByVideoIdReq) (*EtFavoriteCountByUserIdReply, error)
	// 根据userId和videoId判断是否点赞
	IsFavorite(context.Context, *IsFavoriteReq) (*IsFavoriteReply, error)
	mustEmbedUnimplementedLikeServer()
}

// UnimplementedLikeServer must be embedded to have forward compatible implementations.
type UnimplementedLikeServer struct {
}

func (UnimplementedLikeServer) GeteTotalFavoritedNum(context.Context, *GetFavoriteCountByUserIdReq) (*GeteTotalFavoritedNumReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeteTotalFavoritedNum not implemented")
}
func (UnimplementedLikeServer) GetFavoriteCountByUserId(context.Context, *GetFavoriteCountByUserIdReq) (*GetFavoriteCountByUserIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavoriteCountByUserId not implemented")
}
func (UnimplementedLikeServer) GetFavoriteCountByVideoId(context.Context, *GetFavoriteCountByVideoIdReq) (*EtFavoriteCountByUserIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavoriteCountByVideoId not implemented")
}
func (UnimplementedLikeServer) IsFavorite(context.Context, *IsFavoriteReq) (*IsFavoriteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsFavorite not implemented")
}
func (UnimplementedLikeServer) mustEmbedUnimplementedLikeServer() {}

// UnsafeLikeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LikeServer will
// result in compilation errors.
type UnsafeLikeServer interface {
	mustEmbedUnimplementedLikeServer()
}

func RegisterLikeServer(s grpc.ServiceRegistrar, srv LikeServer) {
	s.RegisterService(&Like_ServiceDesc, srv)
}

func _Like_GeteTotalFavoritedNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFavoriteCountByUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServer).GeteTotalFavoritedNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.like/geteTotalFavoritedNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServer).GeteTotalFavoritedNum(ctx, req.(*GetFavoriteCountByUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Like_GetFavoriteCountByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFavoriteCountByUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServer).GetFavoriteCountByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.like/getFavoriteCountByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServer).GetFavoriteCountByUserId(ctx, req.(*GetFavoriteCountByUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Like_GetFavoriteCountByVideoId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFavoriteCountByVideoIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServer).GetFavoriteCountByVideoId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.like/getFavoriteCountByVideoId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServer).GetFavoriteCountByVideoId(ctx, req.(*GetFavoriteCountByVideoIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Like_IsFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsFavoriteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServer).IsFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.like/isFavorite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServer).IsFavorite(ctx, req.(*IsFavoriteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Like_ServiceDesc is the grpc.ServiceDesc for Like service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Like_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.like",
	HandlerType: (*LikeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "geteTotalFavoritedNum",
			Handler:    _Like_GeteTotalFavoritedNum_Handler,
		},
		{
			MethodName: "getFavoriteCountByUserId",
			Handler:    _Like_GetFavoriteCountByUserId_Handler,
		},
		{
			MethodName: "getFavoriteCountByVideoId",
			Handler:    _Like_GetFavoriteCountByVideoId_Handler,
		},
		{
			MethodName: "isFavorite",
			Handler:    _Like_IsFavorite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "like.proto",
}
