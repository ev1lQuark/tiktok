// Code generated by goctl. DO NOT EDIT.
// Source: like.proto

package likeclient

import (
	"context"

	"github.com/ev1lQuark/tiktok/service/like/rpc/types/like"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GetFavoriteCountByAuthorIdsReply = like.GetFavoriteCountByAuthorIdsReply
	GetFavoriteCountByAuthorIdsReq   = like.GetFavoriteCountByAuthorIdsReq
	GetFavoriteCountByUserIdsReply   = like.GetFavoriteCountByUserIdsReply
	GetFavoriteCountByUserIdsReq     = like.GetFavoriteCountByUserIdsReq
	GetFavoriteCountByVideoIdsReply  = like.GetFavoriteCountByVideoIdsReply
	GetFavoriteCountByVideoIdsReq    = like.GetFavoriteCountByVideoIdsReq
	IsFavoriteReply                  = like.IsFavoriteReply
	IsFavoriteReq                    = like.IsFavoriteReq

	Like interface {
		// 根据userId获取本账号所发视频获赞总数
		GetFavoriteCountByAuthorIds(ctx context.Context, in *GetFavoriteCountByAuthorIdsReq, opts ...grpc.CallOption) (*GetFavoriteCountByAuthorIdsReply, error)
		// 根据userId获取本账号喜欢（点赞）总数
		GetFavoriteCountByUserIds(ctx context.Context, in *GetFavoriteCountByUserIdsReq, opts ...grpc.CallOption) (*GetFavoriteCountByUserIdsReply, error)
		// 根据videoId获取视频点赞总数
		GetFavoriteCountByVideoIds(ctx context.Context, in *GetFavoriteCountByVideoIdsReq, opts ...grpc.CallOption) (*GetFavoriteCountByVideoIdsReply, error)
		// 根据userId和videoId判断是否点赞
		IsFavorite(ctx context.Context, in *IsFavoriteReq, opts ...grpc.CallOption) (*IsFavoriteReply, error)
	}

	defaultLike struct {
		cli zrpc.Client
	}
)

func NewLike(cli zrpc.Client) Like {
	return &defaultLike{
		cli: cli,
	}
}

// 根据userId获取本账号所发视频获赞总数
func (m *defaultLike) GetFavoriteCountByAuthorIds(ctx context.Context, in *GetFavoriteCountByAuthorIdsReq, opts ...grpc.CallOption) (*GetFavoriteCountByAuthorIdsReply, error) {
	client := like.NewLikeClient(m.cli.Conn())
	return client.GetFavoriteCountByAuthorIds(ctx, in, opts...)
}

// 根据userId获取本账号喜欢（点赞）总数
func (m *defaultLike) GetFavoriteCountByUserIds(ctx context.Context, in *GetFavoriteCountByUserIdsReq, opts ...grpc.CallOption) (*GetFavoriteCountByUserIdsReply, error) {
	client := like.NewLikeClient(m.cli.Conn())
	return client.GetFavoriteCountByUserIds(ctx, in, opts...)
}

// 根据videoId获取视频点赞总数
func (m *defaultLike) GetFavoriteCountByVideoIds(ctx context.Context, in *GetFavoriteCountByVideoIdsReq, opts ...grpc.CallOption) (*GetFavoriteCountByVideoIdsReply, error) {
	client := like.NewLikeClient(m.cli.Conn())
	return client.GetFavoriteCountByVideoIds(ctx, in, opts...)
}

// 根据userId和videoId判断是否点赞
func (m *defaultLike) IsFavorite(ctx context.Context, in *IsFavoriteReq, opts ...grpc.CallOption) (*IsFavoriteReply, error) {
	client := like.NewLikeClient(m.cli.Conn())
	return client.IsFavorite(ctx, in, opts...)
}
