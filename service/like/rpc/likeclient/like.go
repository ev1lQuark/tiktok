// Code generated by goctl. DO NOT EDIT.
// Source: like.proto

package likeclient

import (
	"context"

	"github.com/ev1lQuark/tiktok/service/like/rpc/types/like"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	EtFavoriteCountByUserIdReply  = like.EtFavoriteCountByUserIdReply
	GetFavoriteCountByUserIdReply = like.GetFavoriteCountByUserIdReply
	GetFavoriteCountByUserIdReq   = like.GetFavoriteCountByUserIdReq
	GetFavoriteCountByVideoIdReq  = like.GetFavoriteCountByVideoIdReq
	GeteTotalFavoritedNumReply    = like.GeteTotalFavoritedNumReply
	GeteTotalFavoritedNumReq      = like.GeteTotalFavoritedNumReq
	IsFavoriteReply               = like.IsFavoriteReply
	IsFavoriteReq                 = like.IsFavoriteReq

	Like interface {
		// 根据userId获取本账号所发视频获赞总数
		GeteTotalFavoritedNum(ctx context.Context, in *GetFavoriteCountByUserIdReq, opts ...grpc.CallOption) (*GeteTotalFavoritedNumReply, error)
		// 根据userId获取本账号喜欢（点赞）总数
		GetFavoriteCountByUserId(ctx context.Context, in *GetFavoriteCountByUserIdReq, opts ...grpc.CallOption) (*GetFavoriteCountByUserIdReply, error)
		// 根据videoId获取视屏点赞总数
		GetFavoriteCountByVideoId(ctx context.Context, in *GetFavoriteCountByVideoIdReq, opts ...grpc.CallOption) (*EtFavoriteCountByUserIdReply, error)
		// 根据userId和videoId判断是否点赞
		IsFavorite(ctx context.Context, in *IsFavoriteReq, opts ...grpc.CallOption) (*IsFavoriteReply, error)
	}

	defaultLike struct {
		cli zrpc.Client
	}
)

func NewLike(cli zrpc.Client) Like {
	return &defaultLike{
		cli: cli,
	}
}

// 根据userId获取本账号所发视频获赞总数
func (m *defaultLike) GeteTotalFavoritedNum(ctx context.Context, in *GetFavoriteCountByUserIdReq, opts ...grpc.CallOption) (*GeteTotalFavoritedNumReply, error) {
	client := like.NewLikeClient(m.cli.Conn())
	return client.GeteTotalFavoritedNum(ctx, in, opts...)
}

// 根据userId获取本账号喜欢（点赞）总数
func (m *defaultLike) GetFavoriteCountByUserId(ctx context.Context, in *GetFavoriteCountByUserIdReq, opts ...grpc.CallOption) (*GetFavoriteCountByUserIdReply, error) {
	client := like.NewLikeClient(m.cli.Conn())
	return client.GetFavoriteCountByUserId(ctx, in, opts...)
}

// 根据videoId获取视屏点赞总数
func (m *defaultLike) GetFavoriteCountByVideoId(ctx context.Context, in *GetFavoriteCountByVideoIdReq, opts ...grpc.CallOption) (*EtFavoriteCountByUserIdReply, error) {
	client := like.NewLikeClient(m.cli.Conn())
	return client.GetFavoriteCountByVideoId(ctx, in, opts...)
}

// 根据userId和videoId判断是否点赞
func (m *defaultLike) IsFavorite(ctx context.Context, in *IsFavoriteReq, opts ...grpc.CallOption) (*IsFavoriteReply, error) {
	client := like.NewLikeClient(m.cli.Conn())
	return client.IsFavorite(ctx, in, opts...)
}
